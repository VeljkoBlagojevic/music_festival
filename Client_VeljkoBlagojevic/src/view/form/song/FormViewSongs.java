package view.form.song;

import controller.Controller;
import domain.Song;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import transfer.Response;
import view.form.componenet.table.SongTableModel;

/**
 *
 * @author VeljkoBlagojevic
 */
public class FormViewSongs extends javax.swing.JFrame {

    private TableModel model;

    /**
     * Creates new form FormViewSongs
     */
    public FormViewSongs() {
        initComponents();
        fillTableSongs();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblSongs = new javax.swing.JTable();
        btnDetails = new javax.swing.JButton();
        txtFilter = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setViewportView(tblSongs);

        btnDetails.setText("Details");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        txtFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFilterKeyTyped(evt);
            }
        });

        jLabel1.setText("Filtering critera:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 567, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(492, 492, 492)
                                .addComponent(btnDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 520, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDetails)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        final int selectedItemsCount = tblSongs.getSelectionModel().getSelectedItemsCount();
        if (selectedItemsCount == 0) {
            JOptionPane.showMessageDialog(this, "You have not selected song you want to see details for!", "Invalid selection", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (selectedItemsCount > 1) {
            JOptionPane.showMessageDialog(this, "You have selected multiple songs. Please select only one song you want to see details for!", "Invalid selection", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int selectedRow = tblSongs.getSelectionModel().getSelectedIndices()[0];
        Song song = ((SongTableModel) tblSongs.getModel()).getSongAt(selectedRow);
        new FormSong(this, false, song).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnDetailsActionPerformed

    private void txtFilterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFilterKeyTyped
//        final TableRowSorter<TableModel> sorter = new TableRowSorter<>(model);
//        tblSongs.setRowSorter(sorter);
//
//        String text = txtFilter.getText();
//        if (text.length() == 0) {
//            sorter.setRowFilter(null);
//        } else {
//            try {
//                sorter.setRowFilter(RowFilter.regexFilter(text));
//            } catch (PatternSyntaxException pse) {
//                System.out.println("Bad regex pattern");
//            }
//        }

        String filterCriteria = txtFilter.getText();

        Song searchSongParam = new Song();
        searchSongParam.setTitle(filterCriteria);

        try {
            Response response = Controller.getInstance().getAllSongsFiltered(searchSongParam);

            if (response.getException() == null) {
                List<Song> songs = (List<Song>) response.getResult();
                if (songs.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "System could not find songs\n", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "System has found songs\n", "Found songs", JOptionPane.INFORMATION_MESSAGE);
                }
                model = new SongTableModel(songs);
                tblSongs.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this, "System could not find songs\n" + response.getException().getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "System could not find songs\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_txtFilterKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetails;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblSongs;
    private javax.swing.JTextField txtFilter;
    // End of variables declaration//GEN-END:variables

    public void fillTableSongs() {
        try {
            Response response = Controller.getInstance().getAllSongs();
            if (response.getException() == null) {
                List<Song> songs = (List<Song>) response.getResult();
                if (songs.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "System could not find songs\n", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "System has found songs\n", "Found songs", JOptionPane.INFORMATION_MESSAGE);
                }
                model = new SongTableModel(songs);
                tblSongs.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this, "System could not find songs\n" + response.getException().getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "System could not find songs\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
