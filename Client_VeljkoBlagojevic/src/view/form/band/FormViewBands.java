package view.form.band;

import domain.Band;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;
import transfer.Response;
import view.form.componenet.table.BandTableModel;

/**
 *
 * @author VeljkoBlagojevic
 */
public class FormViewBands extends javax.swing.JFrame {

    private TableModel model;

    /**
     * Creates new form FormViewBands
     */
    public FormViewBands() {
        initComponents();
        fillTableBands();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblBands = new javax.swing.JTable();
        btnDetails = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtFilter = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setViewportView(tblBands);

        btnDetails.setText("Details");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        jLabel2.setText("Search bands by name:");

        txtFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilterActionPerformed(evt);
            }
        });
        txtFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFilterKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1268, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(510, 510, 510))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDetails)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        final int selectedItemsCount = tblBands.getSelectionModel().getSelectedItemsCount();
        if (selectedItemsCount == 0) {
            JOptionPane.showMessageDialog(this, "You have not selected band you want to see details for!", "Invalid selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (selectedItemsCount > 1) {
            JOptionPane.showMessageDialog(this, "You have selected multiple bands. Please select only one band you want to see details for!", "Invalid selection", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int selectedRow = tblBands.getSelectionModel().getSelectedIndices()[0];
        Band band = ((BandTableModel) tblBands.getModel()).getBandAt(selectedRow);
        new FormBand(this, false, band).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnDetailsActionPerformed

    private void txtFilterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFilterKeyTyped
        String filteringCriteria = txtFilter.getText();

        Band searchBandParam = new Band();
        searchBandParam.setName(filteringCriteria);

        try {
            Response response = controller.Controller.getInstance().getAllBandsFiltered(searchBandParam);
            if (response.getException() == null) {
                List<Band> bands = (List<Band>) response.getResult();
                if (bands.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "System has not found bands with search criteria\n", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "System has found bands with search criteria", "Found bands", JOptionPane.INFORMATION_MESSAGE);
                }
                model = new BandTableModel(bands);
                tblBands.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this, "System has not found bands with search criteria\n" + response.getException().getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "System has not found bands with search criteria\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_txtFilterKeyTyped

    private void txtFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFilterActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetails;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblBands;
    private javax.swing.JTextField txtFilter;
    // End of variables declaration//GEN-END:variables

    public void fillTableBands() {
        try {
            Response response = controller.Controller.getInstance().getAllBands();
            if (response.getException() == null) {
                JOptionPane.showMessageDialog(this, "System has found bands", "Found bands", JOptionPane.INFORMATION_MESSAGE);
                List<Band> bands = (List<Band>) response.getResult();
                model = new BandTableModel(bands);
                tblBands.setModel(model);
            } else {
                JOptionPane.showMessageDialog(this, "System has not found bands\n" + response.getException().getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "System has not found bands\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
